{"version":3,"file":"static/webpack/static/development/pages/index.js.f5ad5d15739de0b3f876.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component , PureComponent } from 'react';\nimport ReactMapGL, { Marker } from 'react-map-gl';\nimport dynamic from 'next/dynamic'\nimport Head from 'next/head'\nimport Dropdowns from \"../components/dropdowns\"\nimport DatePicker from \"react-datepicker\";\nimport { Container, Row, Col } from 'reactstrap';\nimport Chart from \"../components/dataChart\"\nimport 'react-dates/initialize';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport moment from \"moment\";\nimport 'moment-timezone';\n\nimport cmcdata from \"../public/cmcdata_subset.json\"\nimport wqpdata from \"../public/wqp_stations.json\"\n\n\nclass Home extends PureComponent {\n    state = {\n        filtered_data: [],\n        wqp_station_data: [],\n        show_wqp: true,\n        chart_data: [],\n        GroupNames: null,\n        variables: null,\n        selectedGroupNames: null,\n        selectedVariables: null,\n        selected: {index: null, StationName: null}, /// individual row selected\n        startDate: moment().subtract(2, \"year\"),\n        endDate: moment(),\n        availableVariablesAtLocation: null,\n        selectedVariableAtLocation: null\n        };\n\n\n    Map = dynamic(() => import('../components/map'), {ssr: false});\n\n    changeLocation = (e) => {\n        console.log(e.index)\n        this.setState({\n            selected : cmcdata.filter((item)=> item['index'] == e.index)[0]\n        }, () => {\n            this.updateChartData()\n        })\n    }\n\n\n    getUnique = (e, d) => {\n        const result = [];\n        const map = new Map();\n        for (const item of d) {\n            if(!map.has(item[e])){\n                map.set(item[e], true);    // set any value to Map\n                var obj = {};\n                obj[e] = item[e];\n                result.push(obj);\n            }\n        }\n        return result\n\n    }\n\n    setGroupName = (e) => {\n        console.log(e)\n        this.setState({\n            selectedGroupNames: e[0].GroupName\n        }, () => {\n        this.setFilteredData()\n        })\n    }\n\n    setVariable = (e) => {\n        this.setState({\n            selectedVariables: e[0].variable\n        }, () => {\n        this.setFilteredData()\n        })\n    }\n\n     setDates = (startDate, endDate) => {\n        this.setState({\n            startDate : startDate,\n            endDate : endDate\n        }, () => {\n        this.setFilteredData()\n        })\n    }\n\n     resetLocation = () => {\n        this.setState({\n            selected: {index: null, StationName: null},\n            chart_data: null,\n            selectedVariableAtLocation: null\n\n            })\n     }\n\n     setVariableAtLocation = (e) => {\n        console.log(e)\n        this.setState({\n            selectedVariableAtLocation: e[0].variable\n        }, () => {\n        this.updateChartData()\n        })\n    }\n\n\n    filterData = () => {\n        const new_data = (this.state.selectedGroupNames)\n                            ? cmcdata.filter((item) => item['GroupName'] == this.state.selectedGroupNames)\n                            : cmcdata\n        const filtered_data = (this.state.selectedVariables)\n                            ? new_data.filter((item) => item['variable'] == this.state.selectedVariables)\n                            : new_data\n        const final_data = (this.state.startDate)\n                            ? filtered_data.filter(a => new Date(a.Date) - this.state.startDate > 0)\n                            : filtered_data\n        const ultimate_data = (this.state.endDate)\n                            ? final_data.filter(a => new Date(a.Date) - this.state.endDate < 0)\n                            : final_data\n\n        return ultimate_data\n    }\n\n\n    setFilteredData = () => {\n        this.resetLocation()\n        const new_data = this.filterData()\n        this.setState({\n                filtered_data : new_data\n            })\n    }\n\n\n    formatVals = (item, objs) => {\n        const a = item.Date\n        const b = parseFloat(item.value)\n        objs[a] = b\n    }\n\n    updateChartData = () => {\n        console.log(this.state.selected.GroupName)\n\n        const chart_data_by_group = (this.state.selected.StationName)\n            ? cmcdata.filter((item) => item['StationName'] == this.state.selected.StationName)\n            : cmcdata\n\n        const newVariables = this.getUnique('variable', chart_data_by_group)\n\n        this.setState({\n            availableVariablesAtLocation: newVariables\n        }, () => {\n        const new_chart_data = (this.state.selectedVariableAtLocation)\n            ? chart_data_by_group.filter((item) => item['variable'] == this.state.selectedVariableAtLocation)\n            : chart_data_by_group.filter((item) => item['variable'] == this.state.availableVariablesAtLocation[0])\n\n        const chart_data = {}\n        new_chart_data.map((item) => {this.formatVals(item, chart_data)})\n\n            this.setState({\n                chart_data: chart_data,\n        })\n\n        })\n    }\n\n\n\n    componentDidMount = () => {\n        this.setState({\n            filtered_data: cmcdata,\n            GroupNames: this.getUnique('GroupName', cmcdata),\n            variables: this.getUnique('variable', cmcdata),\n            wqp_station_data : wqpdata\n        })\n    }\n\n    render() {\n        const selected = this.state.selected\n        console.log(selected)\n        return (\n        <Container>\n            <Head></Head>\n            <Row>\n            <Col xs={10} style = {{position: 'fixed'}}>\n                    <this.Map\n                        style = {{ height: '700px', width: '100%', zIndex: 1}}\n                        data = {this.state.filtered_data}\n                        wqpdata = {this.state.wqp_station_data}\n                        selected = {this.state.selected}\n                        callBack = {this.changeLocation}\n                    />\n            </Col>\n            <Col style = {{zIndex: 1001, position: 'relative', height: '400px', opacity: 1, margin: '10px'}} xs={4}>\n                <Row className=\"justify-content-md-center\" style={{ border : \"solid 1px #b1b5b5\", backgroundColor: 'white', borderRadius: '25px', padding: '20px', margin: '5px'}}>\n                    <Col style = {{width: '500px'}} >\n                        <Row>\n                            <b> Filter the stations on the map by group name, parameter, or date collected. </b>\n                        </Row>\n                        <Row style={{padding: '5px'}} className=\"justify-content-md-center\">\n                            <Dropdowns placeholder={\"Select a local group...\"} options={this.state.GroupNames} label = {'GroupName'} callBack={this.setGroupName} />\n                        </Row>\n                        <Row style={{padding: '5px'}} className=\"justify-content-md-center\">\n                            <Dropdowns placeholder={\"Select a parameter...\"} options={this.state.variables} label = {'variable'} callBack={this.setVariable} />\n                        </Row>\n                        <Row style={{paddingtop: '10px'}} className=\"justify-content-md-center\">\n                            <DateRangePicker\n                                  startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n                                  startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n                                  endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n                                  endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n                                  onDatesChange={({ startDate, endDate }) => this.setDates(startDate, endDate)} // PropTypes.func.isRequired,\n                                  focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n                                  onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n                            />\n                        </Row>\n                    </Col>\n                </Row>\n                 <Row className=\"justify-content-md-center\" style={{ border : \"solid 1px #b1b5b5\", backgroundColor: 'white', borderRadius: '25px', padding: '10px'}}>\n                    <Col>\n                        { selected.StationName !== null\n                        ? <b> Selected station: {selected.StationName} </b>\n                        : <b> Click a station on the map and select an available parameter to see data. </b>\n                        }\n                        <Dropdowns placeholder={\"available parameters...\"}\n                            options={this.state.availableVariablesAtLocation}\n                            label = {'variable'}\n                            callBack={this.setVariableAtLocation}\n                            />\n                        <Chart data = {this.state.chart_data} unit= {this.state.selected.unit} />\n                    </Col>\n                 </Row>\n            </Col>\n         </Row>\n         </Container>\n        );\n    }\n}\n\nexport default Home"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAbA;AACA;AAgsourceRoot":""}