{"ast":null,"code":"var _jsxFileName = \"/home/dan/github/CMC/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, PureComponent } from 'react';\nimport ReactMapGL, { Marker } from 'react-map-gl';\nimport dynamic from 'next/dynamic';\nimport Head from 'next/head';\nimport Dropdowns from \"../components/dropdowns\";\nimport DatePicker from \"react-datepicker\";\nimport { Container, Row, Col } from 'reactstrap';\nimport Chart from \"../components/dataChart\";\nimport 'react-dates/initialize';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport moment from \"moment\";\nimport 'moment-timezone';\nimport axios from \"axios\";\nimport StationSummary from '../components/stationSummaryPanel'; ///import cmcdata from \"../public/cmcdata_subset.json\"\n\nimport wqpdata from \"../public/wqp_stations.json\";\n\nclass Home extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ///    filtered_data: [],\n      wqp_station_data: [],\n      stations_data: [],\n      parameter_data: [],\n      show_wqp: true,\n      chart_data: [],\n      GroupNames: null,\n      variables: null,\n      selectedGroupNames: null,\n      selectedVariables: null,\n      selected: [],\n      /// individual row selected\n      startDate: moment().subtract(2, \"year\"),\n      endDate: moment(),\n      availableVariablesAtLocation: null,\n      selectedVariableAtLocation: null\n    });\n\n    _defineProperty(this, \"MarkerMap\", dynamic(() => import('../components/map'), {\n      ssr: false,\n      loadableGenerated: {\n        webpack: () => [require.resolveWeak('../components/map')],\n        modules: ['../components/map']\n      }\n    }));\n\n    _defineProperty(this, \"changeLocation\", e => {\n      console.log(e.Id);\n      this.setState({\n        selected: this.state.stations_data.filter(item => item.Id == e.Id)[0]\n      }, () => {\n        console.log('new');\n        this.get_station_data(); ///  this.updateChartData()\n      });\n    });\n\n    _defineProperty(this, \"getUnique\", (e, d) => {\n      const result = [];\n      const map = new Map();\n\n      for (const item of d) {\n        if (!map.has(item[e])) {\n          map.set(item[e], true); // set any value to Map\n\n          var obj = {};\n          obj[e] = item[e];\n          result.push(obj);\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(this, \"setGroupName\", e => {\n      console.log(e);\n      this.setState({\n        selectedGroupNames: e[0].GroupName\n      }, () => {\n        this.setFilteredData();\n      });\n    });\n\n    _defineProperty(this, \"setVariable\", e => {\n      this.setState({\n        selectedVariables: e[0].variable\n      }, () => {\n        this.update_stations_by_parameter();\n      });\n    });\n\n    _defineProperty(this, \"setDates\", (startDate, endDate) => {\n      this.setState({\n        startDate: startDate,\n        endDate: endDate\n      }, () => {\n        this.setFilteredData();\n      });\n    });\n\n    _defineProperty(this, \"resetLocation\", () => {\n      this.setState({\n        selected: {\n          index: null,\n          StationName: null\n        },\n        chart_data: null,\n        selectedVariableAtLocation: null\n      });\n    });\n\n    _defineProperty(this, \"setVariableAtLocation\", e => {\n      console.log(e);\n      this.setState({\n        selectedVariableAtLocation: e[0].variable\n      }, () => {\n        this.updateChartData();\n      });\n    });\n\n    _defineProperty(this, \"formatVals\", (item, objs) => {\n      const a = item.Date;\n      const b = parseFloat(item.value);\n      objs[a] = b;\n    });\n\n    _defineProperty(this, \"updateChartData\", () => {\n      console.log(this.state.selected.GroupName);\n      const chart_data_by_group = this.state.selected.StationName ? cmcdata.filter(item => item['StationName'] == this.state.selected.StationName) : cmcdata;\n      const newVariables = this.getUnique('variable', chart_data_by_group);\n      this.setState({\n        availableVariablesAtLocation: newVariables\n      }, () => {\n        const new_chart_data = this.state.selectedVariableAtLocation ? chart_data_by_group.filter(item => item['variable'] == this.state.selectedVariableAtLocation) : chart_data_by_group.filter(item => item['variable'] == this.state.availableVariablesAtLocation[0]);\n        const chart_data = {};\n        new_chart_data.map(item => {\n          this.formatVals(item, chart_data);\n        });\n        this.setState({\n          chart_data: chart_data\n        });\n      });\n    });\n\n    _defineProperty(this, \"load_station_data\", () => {\n      axios.get('https://cmc.vims.edu/odata/Stations').then(res => {\n        const data = res.data['value']; /// const station_ids = data.map((item) => { return item.Id) })\n\n        this.setState({\n          stations_data: data\n        });\n      });\n    });\n\n    _defineProperty(this, \"load_parameter_data\", () => {\n      axios.get('https://cmc.vims.edu/odata/Groups?$expand=CmcMemberUser,CmcMemberUser2,CmcMemberUser3,ParameterGroups($select=Parameter,LabId,DetectionLimit;$expand=Parameter)&$orderby=Name').then(res => {\n        const data = res.data['value']; ///const parameter_data = data.map((item) => {(item.ParameterGroups)})\n\n        const parameter_types = data.map(item => {\n          return item.ParameterGroups.map(subitem => subitem.Parameter.Name);\n        });\n        const parameter_array = parameter_types.flat();\n        const unique_parameters = parameter_array.filter((x, i, a) => a.indexOf(x) === i);\n        const unique_parameters_dropdown = unique_parameters.map(item => {\n          return {\n            'variable': item\n          };\n        });\n        this.setState({\n          parameter_data: data,\n          variables: unique_parameters_dropdown\n        });\n      });\n    });\n\n    _defineProperty(this, \"get_station_data\", () => {\n      const station_id = this.state.selected.Id;\n      const get_payload = {\n        '?$expand': ['Event($expand=Station,Group),Parameter'],\n        '$filter': [`Event/StationId eq ${station_id} and QaFlagId eq 2`]\n      };\n      axios.get('https://cmc.vims.edu/odata/PublicSamples', {\n        params: get_payload\n      }).then(res => {\n        this.get_station_data();\n        console.log(res.data);\n      });\n    });\n\n    _defineProperty(this, \"update_stations_by_parameter\", () => {\n      const param_data = this.state.parameter_data;\n      console.log(this.state.selectedVariables); /// parameters with a certain code for a station\n\n      const new_data = this.state.selectedVariables ? param_data.filter(item => item['ParameterGroups'].some(subitem => subitem['Parameter']['Name'] == this.state.selectedVariables)) : param_data;\n      console.log(new_data); /// stations supplying data with those parameters (for filtering stations)\n      ///const new_stations_data\n      /// this.setState({})\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.load_station_data();\n      this.load_parameter_data();\n      this.setState({\n        wqp_station_data: wqpdata\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      xs: 10,\n      style: {\n        position: 'fixed'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, __jsx(this.MarkerMap, {\n      style: {\n        height: '700px',\n        width: '100%',\n        zIndex: 1\n      },\n      stations_data: this.state.stations_data\n      /* data = {this.state.filtered_data} */\n      ,\n      wqpdata: this.state.wqp_station_data,\n      show_wqp: this.state.show_wqp,\n      selected: this.state.selected,\n      callBack: this.changeLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    })), __jsx(Col, {\n      style: {\n        zIndex: 1001,\n        position: 'relative',\n        height: '400px',\n        opacity: 1,\n        margin: '10px'\n      },\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, __jsx(Row, {\n      className: \"justify-content-md-center\",\n      style: {\n        border: \"solid 1px #b1b5b5\",\n        backgroundColor: 'white',\n        borderRadius: '25px',\n        padding: '20px',\n        margin: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, __jsx(Col, {\n      style: {\n        width: '500px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 29\n      }\n    }, \" Filter the stations on the map by group name, parameter, or date collected. \")), __jsx(Row, {\n      style: {\n        padding: '5px'\n      },\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 25\n      }\n    }, __jsx(Dropdowns, {\n      placeholder: \"Select a local group...\",\n      options: this.state.GroupNames,\n      label: 'GroupName',\n      callBack: this.setGroupName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 29\n      }\n    })), __jsx(Row, {\n      style: {\n        padding: '5px'\n      },\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 25\n      }\n    }, __jsx(Dropdowns, {\n      placeholder: \"Select a parameter...\",\n      options: this.state.variables,\n      label: 'variable',\n      callBack: this.setVariable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 29\n      }\n    })), __jsx(Row, {\n      style: {\n        paddingtop: '10px'\n      },\n      className: \"justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 25\n      }\n    }, __jsx(DateRangePicker, {\n      startDate: this.state.startDate,\n      startDateId: \"your_unique_start_date_id\",\n      endDate: this.state.endDate,\n      endDateId: \"your_unique_end_date_id\",\n      onDatesChange: ({\n        startDate,\n        endDate\n      }) => this.setDates(startDate, endDate),\n      focusedInput: this.state.focusedInput,\n      onFocusChange: focusedInput => this.setState({\n        focusedInput\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 29\n      }\n    })))), __jsx(Row, {\n      className: \"justify-content-md-center\",\n      style: {\n        border: \"solid 1px #b1b5b5\",\n        backgroundColor: 'white',\n        borderRadius: '25px',\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 18\n      }\n    }, __jsx(StationSummary, {\n      station: this.state.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 18\n      }\n    })))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/dan/github/CMC/pages/index.js"],"names":["React","Component","PureComponent","ReactMapGL","Marker","dynamic","Head","Dropdowns","DatePicker","Container","Row","Col","Chart","DateRangePicker","SingleDatePicker","DayPickerRangeController","moment","axios","StationSummary","wqpdata","Home","wqp_station_data","stations_data","parameter_data","show_wqp","chart_data","GroupNames","variables","selectedGroupNames","selectedVariables","selected","startDate","subtract","endDate","availableVariablesAtLocation","selectedVariableAtLocation","ssr","e","console","log","Id","setState","state","filter","item","get_station_data","d","result","map","Map","has","set","obj","push","GroupName","setFilteredData","variable","update_stations_by_parameter","index","StationName","updateChartData","objs","a","Date","b","parseFloat","value","chart_data_by_group","cmcdata","newVariables","getUnique","new_chart_data","formatVals","get","then","res","data","parameter_types","ParameterGroups","subitem","Parameter","Name","parameter_array","flat","unique_parameters","x","i","indexOf","unique_parameters_dropdown","station_id","get_payload","params","param_data","new_data","some","load_station_data","load_parameter_data","render","position","height","width","zIndex","changeLocation","opacity","margin","border","backgroundColor","borderRadius","padding","setGroupName","setVariable","paddingtop","setDates","focusedInput"],"mappings":"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","sourcesContent":["import React, { Component , PureComponent } from 'react';\nimport ReactMapGL, { Marker } from 'react-map-gl';\nimport dynamic from 'next/dynamic'\nimport Head from 'next/head'\nimport Dropdowns from \"../components/dropdowns\"\nimport DatePicker from \"react-datepicker\";\nimport { Container, Row, Col } from 'reactstrap';\nimport Chart from \"../components/dataChart\"\nimport 'react-dates/initialize';\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport moment from \"moment\";\nimport 'moment-timezone';\nimport axios from \"axios\";\n\nimport StationSummary from '../components/stationSummaryPanel'\n\n///import cmcdata from \"../public/cmcdata_subset.json\"\nimport wqpdata from \"../public/wqp_stations.json\"\n\n\nclass Home extends PureComponent {\n    state = {\n    ///    filtered_data: [],\n        wqp_station_data: [],\n        stations_data: [],\n        parameter_data: [],\n        show_wqp: true,\n        chart_data: [],\n        GroupNames: null,\n        variables: null,\n        selectedGroupNames: null,\n        selectedVariables: null,\n        selected: [], /// individual row selected\n        startDate: moment().subtract(2, \"year\"),\n        endDate: moment(),\n        availableVariablesAtLocation: null,\n        selectedVariableAtLocation: null\n        };\n\n\n    MarkerMap = dynamic(() => import('../components/map'), {ssr: false});\n\n    changeLocation = (e) => {\n        console.log(e.Id)\n        this.setState({\n            selected : this.state.stations_data.filter((item)=> item.Id == e.Id)[0]\n        }, () => {\n            console.log('new')\n            this.get_station_data()\n          ///  this.updateChartData()\n        })\n    }\n\n\n    getUnique = (e, d) => {\n        const result = [];\n        const map = new Map();\n        for (const item of d) {\n            if(!map.has(item[e])){\n                map.set(item[e], true);    // set any value to Map\n                var obj = {};\n                obj[e] = item[e];\n                result.push(obj);\n            }\n        }\n        return result\n\n    }\n\n    setGroupName = (e) => {\n        console.log(e)\n        this.setState({\n            selectedGroupNames: e[0].GroupName\n        }, () => {\n        this.setFilteredData()\n        })\n    }\n\n    setVariable = (e) => {\n        this.setState({\n            selectedVariables: e[0].variable\n        }, () => {\n        this.update_stations_by_parameter()\n        })\n    }\n\n     setDates = (startDate, endDate) => {\n        this.setState({\n            startDate : startDate,\n            endDate : endDate\n        }, () => {\n        this.setFilteredData()\n        })\n    }\n\n     resetLocation = () => {\n        this.setState({\n            selected: {index: null, StationName: null},\n            chart_data: null,\n            selectedVariableAtLocation: null\n            })\n     }\n\n\n     setVariableAtLocation = (e) => {\n        console.log(e)\n        this.setState({\n            selectedVariableAtLocation: e[0].variable\n        }, () => {\n        this.updateChartData()\n        })\n    }\n\n\n    formatVals = (item, objs) => {\n        const a = item.Date\n        const b = parseFloat(item.value)\n        objs[a] = b\n    }\n\n    updateChartData = () => {\n        console.log(this.state.selected.GroupName)\n\n        const chart_data_by_group = (this.state.selected.StationName)\n            ? cmcdata.filter((item) => item['StationName'] == this.state.selected.StationName)\n            : cmcdata\n\n        const newVariables = this.getUnique('variable', chart_data_by_group)\n\n        this.setState({\n            availableVariablesAtLocation: newVariables\n        }, () => {\n        const new_chart_data = (this.state.selectedVariableAtLocation)\n            ? chart_data_by_group.filter((item) => item['variable'] == this.state.selectedVariableAtLocation)\n            : chart_data_by_group.filter((item) => item['variable'] == this.state.availableVariablesAtLocation[0])\n\n        const chart_data = {}\n        new_chart_data.map((item) => {this.formatVals(item, chart_data)})\n\n            this.setState({\n                chart_data: chart_data,\n        })\n\n        })\n    }\n\n    load_station_data = () => {\n        axios.get('https://cmc.vims.edu/odata/Stations')\n            .then(res => {\n                const data = res.data['value'];\n               /// const station_ids = data.map((item) => { return item.Id) })\n\n                this.setState({\n                    stations_data: data\n                })\n\n            })\n    }\n\n    load_parameter_data = () => {\n        axios.get('https://cmc.vims.edu/odata/Groups?$expand=CmcMemberUser,CmcMemberUser2,CmcMemberUser3,ParameterGroups($select=Parameter,LabId,DetectionLimit;$expand=Parameter)&$orderby=Name')\n            .then(res => {\n                const data = res.data['value'];\n               ///const parameter_data = data.map((item) => {(item.ParameterGroups)})\n                const parameter_types = data.map((item) => { return item.ParameterGroups.map((subitem) => subitem.Parameter.Name) })\n                const parameter_array = parameter_types.flat()\n                const unique_parameters = parameter_array.filter((x, i, a) => a.indexOf(x) === i)\n                const unique_parameters_dropdown = unique_parameters.map((item) => { return {'variable' : item}})\n\n                this.setState({\n                    parameter_data: data,\n                    variables: unique_parameters_dropdown\n                })\n\n            })\n    }\n\n\n    get_station_data = () => {\n        const station_id = this.state.selected.Id\n        const get_payload = {\n            '?$expand': ['Event($expand=Station,Group),Parameter'],\n            '$filter': [`Event/StationId eq ${station_id} and QaFlagId eq 2`]\n            }\n\n        axios.get('https://cmc.vims.edu/odata/PublicSamples', {params : get_payload})\n            .then(res => {        this.get_station_data();\n                console.log(res.data)\n            })\n\n\n    }\n\n\n    update_stations_by_parameter = () => {\n        const param_data = this.state.parameter_data;\n        console.log(this.state.selectedVariables)\n\n        /// parameters with a certain code for a station\n        const new_data = (this.state.selectedVariables)\n                            ? param_data.filter((item) => item['ParameterGroups'].some((subitem) => subitem['Parameter']['Name'] == this.state.selectedVariables))\n                            : param_data\n        console.log(new_data)\n\n        /// stations supplying data with those parameters (for filtering stations)\n        ///const new_stations_data\n\n\n       /// this.setState({})\n\n    }\n\n\n\n\n    componentDidMount = () => {\n        this.load_station_data();\n        this.load_parameter_data();\n\n        this.setState({\n            wqp_station_data : wqpdata\n        })\n    }\n\n    render() {\n\n        return (\n        <Container>\n            <Head></Head>\n            <Row>\n            <Col xs={10} style = {{position: 'fixed'}}>\n                    <this.MarkerMap\n                        style = {{ height: '700px', width: '100%', zIndex: 1}}\n                        stations_data={this.state.stations_data}\n                       /* data = {this.state.filtered_data} */\n                        wqpdata = {this.state.wqp_station_data}\n                        show_wqp = {this.state.show_wqp}\n                        selected = {this.state.selected}\n                        callBack = {this.changeLocation}\n                    />\n            </Col>\n            <Col style = {{zIndex: 1001, position: 'relative', height: '400px', opacity: 1, margin: '10px'}} xs={4}>\n                <Row className=\"justify-content-md-center\" style={{ border : \"solid 1px #b1b5b5\", backgroundColor: 'white', borderRadius: '25px', padding: '20px', margin: '5px'}}>\n                    <Col style = {{width: '500px'}} >\n                        <Row>\n                            <b> Filter the stations on the map by group name, parameter, or date collected. </b>\n                        </Row>\n                        <Row style={{padding: '5px'}} className=\"justify-content-md-center\">\n                            <Dropdowns\n                                placeholder={\"Select a local group...\"}\n                                options={this.state.GroupNames}\n                                label = {'GroupName'}\n                                callBack={this.setGroupName} />\n                        </Row>\n                        <Row style={{padding: '5px'}} className=\"justify-content-md-center\">\n                            <Dropdowns\n                                placeholder={\"Select a parameter...\"}\n                                options={this.state.variables}\n                                label = {'variable'}\n                                callBack={this.setVariable} />\n                        </Row>\n                        <Row style={{paddingtop: '10px'}} className=\"justify-content-md-center\">\n                            <DateRangePicker\n                                  startDate={this.state.startDate}\n                                  startDateId=\"your_unique_start_date_id\"\n                                  endDate={this.state.endDate}\n                                  endDateId=\"your_unique_end_date_id\"\n                                  onDatesChange={({ startDate, endDate }) => this.setDates(startDate, endDate)}\n                                  focusedInput={this.state.focusedInput}\n                                  onFocusChange={focusedInput => this.setState({ focusedInput })}\n                            />\n                        </Row>\n                    </Col>\n                </Row>\n                 <Row className=\"justify-content-md-center\" style={{ border : \"solid 1px #b1b5b5\", backgroundColor: 'white', borderRadius: '25px', padding: '10px'}}>\n                 <StationSummary station = {this.state.selected} />\n                 </Row>\n            </Col>\n         </Row>\n         </Container>\n        );\n    }\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}